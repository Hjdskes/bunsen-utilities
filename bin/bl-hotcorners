#!/usr/bin/env python2.7
#
#    bl-hotcorners: a script for adding hot corners to Openbox.
#    Copyright (C) 2012 Philip Newborough   <corenominal@corenominal.org>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#    Renamed for BunsenLabs

from Xlib import display, X
from Xlib.ext.xtest import fake_input
import argparse
import sys, time, os, ConfigParser

BOUNCE = 40
INTERVAL = 0.2

def create_config_file(config, config_file):
    """Creates a new configuration file.

    :param config: the ConfigParser instance
    :param config_file: the path of the configuration file"""
    with open(config_file, 'w') as f:
        config.add_section('Hot Corners')
        config.set('Hot Corners', 'top_left_corner_command', 'gmrun')
        config.set('Hot Corners', 'top_right_corner_command', '')
        config.set('Hot Corners', 'bottom_left_corner_command', '')
        config.set('Hot Corners', 'bottom_right_corner_command', '')
        config.write(f)

def parse_config():
    """Parses the configuration file, creating it if it does not exist yet."""
    config = ConfigParser.ConfigParser()
    config_dir = os.getenv("HOME") + "/.config/bl-hotcorners"
    config_file = config_dir + "/bl-hotcornersrc"

    if not os.path.exists(config_dir):
        os.makedirs(config_dir)
        create_config_file(config, config_file)

    return config, config_file

def mousepos(root):
    """Returns the mouse pointer's position on the screen.

    :param root: the X root window"""
    data = root.query_pointer()._data
    return data["root_x"], data["root_y"], data["mask"]

def mousemove(dpy, x, y):
    """Moves the mouse pointer on the screen.

    :param dpy: the X Display object
    :param x: the x-coordinate to move the mouse pointer to
    :param y: the y-coordinate to move the mouse pointer to"""
    fake_input(dpy, X.MotionNotify, x=x, y=y)
    dpy.sync()

def main():
    ap = argparse.ArgumentParser(description="Hotcorners")
    ap.add_argument("-k", "--kill", help="attempt to kill any runnng instances",
                action="store_true")
    ap.add_argument("-d", "--daemon", help="run daemon and listen for cursor triggers",
                action="store_true")
    opts = ap.parse_args(sys.argv[1:])

    if opts.kill:
        print ("Attempting to kill any running instances...")
        os.system('pkill -9 -f bl-hotcorners')
        sys.exit()
    elif opts.daemon:
        Config = ConfigParser.ConfigParser()
        cfgdir = os.getenv("HOME")+"/.config/bl-hotcorners"
        rcfile = cfgdir+"/bl-hotcornersrc"
        bounce = 40
        disp = display.Display()
        root=display.Display().screen().root

    config, config_file = parse_config()

    dpy = display.Display()
    root = dpy.screen().root
    screen_width = dpy.screen().width_in_pixels
    screen_height = dpy.screen().height_in_pixels
    rt = screen_width - 1
    bt = screen_height - 1

    while True:
        config.read(config_file)
        time.sleep(INTERVAL)
        pos = mousepos(dpy.screen().root)

        if pos[0] == 0 and pos[1] == 0:
            if config.get('Hot Corners','top_left_corner_command') != '':
                time.sleep(0.2)
                pos = mousepos(dpy.screen().root)
                if pos[0] == 0 and pos[1] == 0:
                    mousemove(dpy, pos[0] + BOUNCE, pos[1] + BOUNCE)
                    os.system('(' + config.get('Hot Corners','top_left_corner_command') + ') &')
                    mousemove(dpy, pos[0] + BOUNCE, pos[1] + BOUNCE)
                    time.sleep(2)

        elif pos[0] == rt and pos[1] == 0:
            if config.get('Hot Corners','top_right_corner_command') != '':
                time.sleep(0.2)
                pos = mousepos()
                if pos[0] == rt and pos[1] == 0 :
                    mousemove(dpy, pos[0] - BOUNCE, pos[1] + BOUNCE)
                    os.system('(' + config.get('Hot Corners','top_right_corner_command') + ') &')
                    mousemove(dpy, pos[0] - BOUNCE, pos[1] + BOUNCE)
                    time.sleep(2)

        elif pos[0] == 0 and pos[1] == bt:
            if config.get('Hot Corners','bottom_left_corner_command') != '':
                time.sleep(0.2)
                pos = mousepos()
                if pos[0] == 0 and pos[1] == bt:
                    mousemove(dpy, pos[0] + BOUNCE, pos[1] - BOUNCE)
                    os.system('(' + config.get('Hot Corners','bottom_left_corner_command') + ') &')
                    mousemove(dpy, pos[0] + BOUNCE, pos[1] - BOUNCE)
                    time.sleep(2)

        elif pos[0] == rt and pos[1] == bt:
            if config.get('Hot Corners','bottom_right_corner_command') != '':
                time.sleep(0.2)
                pos = mousepos()
                if pos[0] == rt and pos[1] == bt:
                    mousemove(dpy, pos[0] - BOUNCE, pos[1] - BOUNCE)
                    os.system('(' + config.get('Hot Corners','bottom_right_corner_command') + ') &')
                    mousemove(dpy, pos[0] - BOUNCE, pos[1] - BOUNCE)
                    time.sleep(2)

if __name__ == "__main__":
    main()
