#!/usr/bin/env python
"""bl-hotcorners is a script to add hot corners to Openbox, or any somewhat
EWMH-compliant window manager.

bl-hotcorners was originally written for CrunchBang Linux <http://crunchbang.org/> by Philip
Newborough <corenominal@corenominal.org>. It is repackaged for BunsenLabs by John Crawley and
rewritten for BunsenLabs by Jente Hidskes <hjdskes@gmail.com>."""

# TODO:
# 1. Perhaps use python-daemon

from Xlib import display
import argparse, sys, time, os, ConfigParser

BOUNCE = 40
INTERVAL = 0.2
TRIGGER_INTERVAL = 2

def create_config_file(config, config_file):
    """Creates a new configuration file.

    :param config: the ConfigParser instance
    :param config_file: the path of the configuration file"""
    with open(config_file, 'w') as _config_file:
        config.add_section('Hot Corners')
        config.set('Hot Corners', 'top_left_corner_command', 'gmrun')
        config.set('Hot Corners', 'top_right_corner_command', '')
        config.set('Hot Corners', 'bottom_left_corner_command', '')
        config.set('Hot Corners', 'bottom_right_corner_command', '')
        config.write(_config_file)

def parse_config():
    """Parses the configuration file, creating it if it does not exist yet."""
    config = ConfigParser.ConfigParser()
    config_dir = os.getenv("HOME") + "/.config/bl-hotcorners"
    config_file = config_dir + "/bl-hotcornersrc"

    if not os.path.exists(config_dir):
        os.makedirs(config_dir)
        create_config_file(config, config_file)

    return config, config_file

def mousepos(root):
    """Returns the mouse pointer's position on the screen.

    :param root: the X root window"""
    data = root.query_pointer()._data
    return data["root_x"], data["root_y"]

def mousemove(dpy, root, x, y):
    """Moves the mouse pointer on the screen.

    :param dpy: the X Display object
    :param root: the root X Window object
    :param x: the x-coordinate to move the mouse pointer to
    :param y: the y-coordinate to move the mouse pointer to"""
    root.warp_pointer(x, y)
    dpy.sync()

def move_func_top_left(dpy, root, x, y):
    """Offsets the mouse pointer from the top left corner."""
    mousemove(dpy, root, x + BOUNCE, y + BOUNCE)
def move_func_top_right(dpy, root, x, y):
    """Offsets the mouse pointer from the top right corner."""
    mousemove(dpy, root, x - BOUNCE, y + BOUNCE)
def move_func_bottom_left(dpy, root, x, y):
    """Offsets the mouse pointer from the bottom left corner."""
    mousemove(dpy, root, x + BOUNCE, y - BOUNCE)
def move_func_bottom_right(dpy, root, x, y):
    """Offsets the mouse pointer from the bottom right corner."""
    mousemove(dpy, root, x - BOUNCE, y - BOUNCE)

def in_corner(dpy, root, _corner, move_func, command):
    """Performs the hot corner functionality.

    :param dpy: the X Display object
    :param root: the root X Window object
    :param _corner: the screen corner that is activated
    :param move_func: function to warp the mouse pointer away from the screen corner
    :param command: the command to execute"""
    time.sleep(INTERVAL)
    corner = mousepos(root)
    if corner == _corner:
        move_func(dpy, root, corner[0], corner[1])
        os.system(command)
        move_func(dpy, root, corner[0], corner[1])
        time.sleep(TRIGGER_INTERVAL)

def main():
    ap = argparse.ArgumentParser(description="Hotcorners")
    ap.add_argument("-k", "--kill", help="attempt to kill any runnng instances",
                action="store_true")
    ap.add_argument("-d", "--daemon", help="run daemon and listen for cursor triggers",
                action="store_true")
    opts = ap.parse_args(sys.argv[1:])

    if opts.kill:
        print ("Attempting to kill any running instances...")
        os.system('pkill -9 -f bl-hotcorners')
        sys.exit()
    elif opts.daemon:
        Config = ConfigParser.ConfigParser()
        cfgdir = os.getenv("HOME")+"/.config/bl-hotcorners"
        rcfile = cfgdir+"/bl-hotcornersrc"
        bounce = 40
        disp = display.Display()
        root=display.Display().screen().root

    config, config_file = parse_config()
    dpy = display.Display()
    root = dpy.screen().root
    screen_width = dpy.screen().width_in_pixels
    screen_height = dpy.screen().height_in_pixels

    top_left = 0, 0
    top_right = screen_width - 1, 0
    bottom_left = 0, screen_height - 1
    bottom_right = screen_width - 1, screen_height - 1

    while True:
        config.read(config_file)
        time.sleep(INTERVAL)
        corner = mousepos(root)

        if corner == top_left and config.get('Hot Corners', 'top_left_corner_command'):
            command = '(' + config.get('Hot Corners', 'top_left_corner_command') + ') &'
            in_corner(dpy, root, top_left, move_func_top_left, command)
        elif corner == top_right and config.get('Hot Corners', 'top_right_corner_command'):
            command = '(' + config.get('Hot Corners', 'top_right_corner_command') + ') &'
            in_corner(dpy, root, top_right, move_func_top_right, command)
        elif corner == bottom_left and config.get('Hot Corners', 'bottom_left_corner_command'):
            command = '(' + config.get('Hot Corners', 'bottom_left_corner_command') + ') &'
            in_corner(dpy, root, bottom_left, move_func_bottom_left, command)
        elif corner == bottom_right and config.get('Hot Corners', 'bottom_right_corner_command'):
            command = '(' + config.get('Hot Corners', 'bottom_right_corner_command') + ') &'
            in_corner(dpy, root, bottom_right, move_func_bottom_right, command)

if __name__ == "__main__":
    main()

